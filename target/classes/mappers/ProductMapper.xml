<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jafa.repository.ProductRepository">
  
  	<!-- 카테고리 -->
  	<resultMap type="productCategory" id="cateMap"> 
  		<result property="cateId" column="cateId"/>
  		<result property="cateName" column="cateName"/>
  	</resultMap>
	<!-- 카테고리 목록 -->
	<select id="getProductCateList" resultMap="cateMap">
		select * from CATEGORY_PRODUCT
	</select>
	<!-- 카테고리 추가 -->
	<insert id="saveProductCate">
		insert into CATEGORY_PRODUCT(cateId,cateName)
		values(#{cateId},#{cateName})
	</insert>
  	<!-- 카테고리 삭제 -->
  	<delete id="delProductCate">
  		delete from CATEGORY_PRODUCT where cateId=#{cateId}
  	</delete>
  	
  	
  	<resultMap type="productVO" id="productMap">
		<result property="product_Bno" column="product_Bno"/>
		<result property="product_Name" column="product_Name"/>
		<result property="product_Intro" column="product_Intro"/>
		<result property="product_Content" column="product_Content"/>
		<result property="product_Size" column="product_Size"/>
		<result property="product_Weight" column="product_Weight"/>
		<result property="product_Price" column="product_Price"/>
		<result property="product_Stock" column="product_Stock"/>
		<result property="fileName_Product" column="fileName_Product"/>
		<result property="fileType_Product" column="fileType_Product"/>
		<collection property="productCategory" resultMap="cateMap"/>
		<!-- 
			<collection> 태그의 property 속성은 productVO 객체 안의 컬렉션 프로퍼티인 productCategory와 매핑
		 -->
  	</resultMap>
  
  	<!-- 검색준비 -->
	<sql id="condition"> 
		<trim prefix="and"> <!-- trim태그-> SQL 조건절에서 불필요한부분 자동제거, 필요부분만 유지 prefix-> 조건절 접두사 and로 시작할때 유용한 조건절 생성 -->
			<choose>
				<when test="type == 'N'.toString()"> <!-- type이 N일때 product_Name컬럼과 keyword를 이용한 LIKE 조건절생성 --> 
					product_Name like '%'||#{keyword}||'%'
				</when>
				<when test="type == 'C'.toString()"> <!-- type이 C일때 product_Content컬럼과 keyword를 이용한 LIKE 조건절생성 -->
					product_Content like '%'||#{keyword}||'%'
				</when>
			</choose>
		</trim>
		<if test="productCategory != null and productCategory.cateId != null and productCategory.cateId != ''">
			<!-- productCategory 객체와 .cateId 프로퍼티가 null이 아니고, 빈 문자열이 아닌 경우 -->
			and p.cateId = #{productCategory.cateId} 
		</if> 
	</sql>
	
	<!-- 상품테이블의 모든 레코드 수 조회하고 sql로 작성한 검색기능을 include   -->
	<select id="getTotalCount" resultType="int">
		select count(*) from PRODUCT_TBL P
		<where>
			<include refid="condition" />
			<!-- <include>-> SQL코드의 재사용을 위한태그, 위 정의된 SQL 코드를 참조하여 동적인검색조건생성 refid-> SQL코드의 id값 -->
		</where>
	</select>
  
	<!-- 리스트 -->
	<select id="list" resultMap="productMap">
	    <![CDATA[
	    SELECT 
	        rn, product_Bno, product_Name, product_Intro, product_Content, product_Size, product_Weight, product_Price, product_Stock, fileName_Product,
	        cateId, cateName 
	    FROM 
	    (
	        SELECT 
	            /*+ index_desc(PRODUCT_TBL pk_product_tbl) */
	            rownum rn, p.product_Bno, p.product_Name, p.product_Intro, p.product_Content, p.product_Size, p.product_Weight, p.product_Price, p.product_Stock, p.fileName_Product,
	            c.cateId, c.cateName       
	        FROM 
	        PRODUCT_TBL p
	        INNER JOIN CATEGORY_PRODUCT c  
	        ON c.cateId = p.cateId
	        WHERE rownum <= #{maxRow}
	        ]]>
	        	<include refid="condition" />
	        )
	        <![CDATA[
	    WHERE rn > #{minRow}
	    ]]>
	</select>  
		<!-- 
		<![CDATA[ ... ]]> -> CDATA섹션은 쿼리안에 XML태그를 포함할 수 있도록 특수하게 문법적인 처리를 해줌
		70행~73행 : 실제로 상품 목록을 조회하는 SQL 쿼리
		74행~86행( ... ) : 서브쿼리 정의, 상품테이블과 카테고리테이블을 조인하여 상품정보와 상품카테고리정보를 함께 조회한 뒤 결과를 가져오고, rownum 값을 rn이라는 별칭으로 할당
						  조인 조건은 c.cateId = p.cateId로, CATEGORY_PRODUCT 테이블의 cateId 컬럼과 PRODUCT_TBL 테이블의 cateId 컬럼을 조인
		조회결과는 ProductVO객체의 필드와 ProductCategory객체의 필드에 매핑됨
		<include> 태그를 사용 id가 condition인 SQL조건문을 참조한후 sql문 내 if절의 productCategory를 찾을때 productCategory가 있는 ProductCriteria객체로 접근,
		객체 내 필드값을 사용하여 최대레코드 수(#{maxRow})와 최소 레코드 수(#{minRow})를 계산하여 결과를 페이징 처리
		86행~87행 : c.cateId = p.cateId는 카테고리테이블의 cateId와 상품테이블의 cateId가 같은 값일때, 두 테이블을 INNER JOIN, 두 테이블의 관련된 데이터를 연결하고 조회 
		
		rownum : 오라클에서 사용되는 가상의 컬럼, 각 행의 고유한번호를 나타냄. rownum은 조회된 행의 순서를 나타내며, 1부터 시작하여 각 행이 조회되는 순서대로 1씩 증가
		rownum을 활용하여 페이징구현. 별칭 rn을 써서 상품테이블과 카테고리테이블 조인결과에 rownum 값을 할당하고, 이를 활용하여 rn > #{minRow} 조건을 적용함으로써,
		minRow 값보다 큰 rn 값을 가진 행들만 조회되도록 필터링, 이를 통해 minRow부터 maxRow까지의 범위의 행들만 조회되는 페이징 기능이 구현
	 -->
	

	<select id="detail" resultType="productVO">
		select * from PRODUCT_TBL where PRODUCT_BNO=#{PRODUCT_BNO} 
	</select>

	<!-- 글쓰기 폼 -->
	<insert id="write" useGeneratedKeys="true" keyColumn="product_Bno" keyProperty="product_Bno">
		INSERT INTO PRODUCT_TBL(PRODUCT_BNO, cateId, PRODUCT_NAME, PRODUCT_INTRO, PRODUCT_CONTENT, PRODUCT_SIZE, PRODUCT_weight, PRODUCT_PRICE, PRODUCT_STOCK, fileName_Product, fileType_Product) 
		values(PRODUCT_BNO_SEQ.NEXTVAL, #{productCategory.cateId}, #{product_Name}, #{product_Intro}, #{product_Content}, #{product_Size}, #{product_Weight}, #{product_Price}, #{product_Stock}, 
		#{fileName_Product, jdbcType=VARCHAR}, #{fileType_Product, jdbcType=VARCHAR})
	</insert>
	<!-- 
		글작성 안됨 here is no getter for property named 'PRODUCT_NAME' in 'class com.jafa.domain.ProductVO 게터가 없음
		위쪽 resultMap에서 property명과 insert문의 values뒤에 들어가는 속성이 일치해야하는데 달라서 getter를 못찾음 해결됨
	 -->
	
	
	<update id="modify">
		update PRODUCT_TBL
		set
			product_Name = #{product_Name},
			product_Intro = #{product_Intro},
			product_Content = #{product_Content},
			product_Size = #{product_Size},
			product_Weight = #{product_Weight},
			product_Price = #{product_Price},
			product_Stock = #{product_Stock},
			fileName_Product = #{fileName_Product, jdbcType=VARCHAR},
			fileType_Product = #{fileType_Product, jdbcType=VARCHAR}
		where product_Bno = #{product_Bno}
	</update>

	<update id="modifyOnlyContent">
		update PRODUCT_TBL
		set
			product_Name = #{product_Name},
			product_Intro = #{product_Intro},
			product_Content = #{product_Content},
			product_Size = #{product_Size},
			product_Weight = #{product_Weight},
			product_Price = #{product_Price},
			product_Stock = #{product_Stock}
		where product_Bno = #{product_Bno}
	</update>
	
	<delete id="remove">
		delete from PRODUCT_TBL where product_Bno=#{product_Bno}
	</delete>

</mapper>